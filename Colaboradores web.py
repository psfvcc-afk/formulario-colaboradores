import streamlit as st
import pandas as pd
import dropbox
from datetime import datetime, date, timedelta
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import calendar
import time

st.set_page_config(
    page_title="Processamento Salarial v2.3",
    page_icon="üí∞",
    layout="wide"
)

# ==================== CONFIGURA√á√ïES ====================

DROPBOX_APP_KEY = st.secrets["DROPBOX_APP_KEY"]
DROPBOX_APP_SECRET = st.secrets["DROPBOX_APP_SECRET"]
DROPBOX_REFRESH_TOKEN = st.secrets["DROPBOX_REFRESH_TOKEN"]
ADMIN_PASSWORD = st.secrets.get("ADMIN_PASSWORD", "adminpedro")

dbx = dropbox.Dropbox(
    app_key=DROPBOX_APP_KEY,
    app_secret=DROPBOX_APP_SECRET,
    oauth2_refresh_token=DROPBOX_REFRESH_TOKEN
)

EMPRESAS = {
    "Magnetic Sky Lda": {
        "path": "/Pedro Couto/Projectos/Alcal√°_Arc_Amoreira/Gest√£o operacional/RH/Processamento Sal√°rios Magnetic/Gest√£o Colaboradores Magnetic.xlsx",
        "tem_horas_extras": False
    },
    "CCM Retail Lda": {
        "path": "/Pedro Couto/Projectos/Pingo Doce/Pingo Doce/2. Opera√ß√£o/1. Recursos Humanos/Processamento salarial/Gest√£o Colaboradores.xlsx",
        "tem_horas_extras": True
    }
}

FERIADOS_NACIONAIS_2025 = [
    date(2025, 1, 1), date(2025, 4, 18), date(2025, 4, 20), date(2025, 4, 25),
    date(2025, 5, 1), date(2025, 6, 10), date(2025, 6, 19), date(2025, 8, 15),
    date(2025, 10, 5), date(2025, 11, 1), date(2025, 12, 1), date(2025, 12, 8),
    date(2025, 12, 25)
]

MOTIVOS_RESCISAO = [
    "Den√∫ncia pela entidade patronal - per√≠odo experimental",
    "Den√∫ncia pelo trabalhador - per√≠odo experimental",
    "Caducidade contrato a termo",
    "Den√∫ncia pelo trabalhador - aviso pr√©vio parcial",
    "Den√∫ncia pelo trabalhador - aviso pr√©vio completo",
    "Den√∫ncia pelo trabalhador - sem aviso pr√©vio",
    "Den√∫ncia pela entidade patronal - excesso faltas",
    "Outro (especificar em observa√ß√µes)"
]

# Colunas expandidas do snapshot (incluindo dados para IRS)
COLUNAS_SNAPSHOT = [
    "Nome Completo", "Ano", "M√™s", "N¬∫ Horas/Semana", "Subs√≠dio Alimenta√ß√£o Di√°rio",
    "N√∫mero Pingo Doce", "Sal√°rio Bruto", "Vencimento Hora", 
    "Estado Civil", "N¬∫ Titulares", "N¬∫ Dependentes", "Defici√™ncia",
    "IRS Percentagem Fixa", "IRS Modo Calculo",
    "Status", "Data Rescis√£o", "Motivo Rescis√£o", 
    "NIF", "NISS", "Data de Admiss√£o", "IBAN", "Sec√ß√£o", "Timestamp"
]

ESTADOS_CIVIS = ["Solteiro", "Casado √önico Titular", "Casado Dois Titulares"]

# ==================== SESSION STATE ====================

if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'salario_minimo' not in st.session_state:
    st.session_state.salario_minimo = 870.0
if 'feriados_municipais' not in st.session_state:
    st.session_state.feriados_municipais = [date(2025, 1, 14)]
if 'ultimo_reload' not in st.session_state:
    st.session_state.ultimo_reload = datetime.now()
if 'tabela_irs' not in st.session_state:
    st.session_state.tabela_irs = None

# ==================== FUN√á√ïES DE AUTENTICA√á√ÉO ====================

def check_password():
    def password_entered():
        if st.session_state["password"] == ADMIN_PASSWORD:
            st.session_state.authenticated = True
            del st.session_state["password"]
        else:
            st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        st.title("üîí Processamento Salarial - Login")
        st.markdown("---")
        st.text_input("Password de Administrador", type="password", key="password", on_change=password_entered)
        if "password" in st.session_state and not st.session_state.authenticated:
            st.error("‚ùå Password incorreta")
        return False
    return True

# ==================== FUN√á√ïES DROPBOX ====================

def get_nome_aba_snapshot(ano, mes):
    return f"Estado_{ano}_{mes:02d}"

def download_excel(empresa):
    try:
        file_path = EMPRESAS[empresa]["path"]
        _, response = dbx.files_download(file_path)
        return BytesIO(response.content)
    except Exception as e:
        st.error(f"‚ùå Erro ao baixar Excel: {e}")
        return None

def garantir_aba(wb, nome_aba, colunas):
    if nome_aba not in wb.sheetnames:
        ws = wb.create_sheet(nome_aba)
        ws.append(colunas)
        return True
    return False

def upload_excel(empresa, wb):
    try:
        file_path = EMPRESAS[empresa]["path"]
        output = BytesIO()
        wb.save(output)
        output.seek(0)
        dbx.files_upload(output.read(), file_path, mode=dropbox.files.WriteMode.overwrite)
        return True
    except Exception as e:
        st.error(f"‚ùå Erro ao enviar Excel: {e}")
        return False

# ==================== FUN√á√ïES DE C√ÅLCULO ====================

def calcular_salario_base(horas_semana, salario_minimo):
    if horas_semana == 40:
        return salario_minimo
    elif horas_semana == 20:
        return salario_minimo / 2
    elif horas_semana == 16:
        return salario_minimo * 0.4
    return salario_minimo * (horas_semana / 40)

def calcular_vencimento_hora(salario_bruto, horas_semana):
    if horas_semana == 0:
        return 0
    return (salario_bruto * 12) / (52 * horas_semana)

def calcular_vencimento_ajustado(salario_bruto, dias_faltas, dias_baixas):
    """
    F√ìRMULA CORRETA: (salario_bruto / 30) * (30 - faltas - baixas)
    SEMPRE usa 30 como base!
    """
    dias_pagos = 30 - dias_faltas - dias_baixas
    dias_pagos = max(dias_pagos, 0)  # N√£o pode ser negativo
    return (salario_bruto / 30) * dias_pagos

def calcular_dias_uteis(ano, mes, feriados_list):
    num_dias = calendar.monthrange(ano, mes)[1]
    dias_uteis = 0
    for dia in range(1, num_dias + 1):
        data = date(ano, mes, dia)
        if data.weekday() < 5 and data not in feriados_list:
            dias_uteis += 1
    return dias_uteis

def carregar_tabela_irs_excel(uploaded_file):
    """Carrega tabela IRS de ficheiro Excel"""
    try:
        # Tentar ler todas as sheets
        xls = pd.ExcelFile(uploaded_file)
        st.success(f"‚úÖ Ficheiro carregado! Abas encontradas: {', '.join(xls.sheet_names)}")
        
        # Guardar em session_state
        st.session_state.tabela_irs = xls
        return xls
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar tabela: {e}")
        return None

def calcular_irs_por_tabela(base_incidencia, estado_civil, num_dependentes, tem_deficiencia=False):
    """
    Calcula IRS com base nas tabelas carregadas
    base_incidencia = sal√°rio bruto
    """
    if st.session_state.tabela_irs is None:
        st.warning("‚ö†Ô∏è Tabela IRS n√£o carregada. Usando 10% por defeito.")
        return base_incidencia * 0.10
    
    # Determinar qual tabela usar
    # Para trabalho dependente (n√£o pens√µes):
    # - N√£o casado ou casado dois titulares sem defici√™ncia ‚Üí Tabela I-VII
    # - Casado √∫nico titular sem defici√™ncia ‚Üí outra tabela
    # etc.
    
    # Por enquanto, retorno simplificado
    # TODO: Implementar l√≥gica completa com as tabelas
    taxa_irs = 0.10  # Placeholder
    
    return base_incidencia * taxa_irs

# ==================== FUN√á√ïES DE DADOS BASE ====================

def carregar_dados_base(empresa):
    excel_file = download_excel(empresa)
    if excel_file:
        try:
            df = pd.read_excel(excel_file, sheet_name="Colaboradores")
            return df
        except Exception as e:
            st.error(f"‚ùå Erro ao ler aba Colaboradores: {e}")
    return pd.DataFrame()

def criar_snapshot_inicial(empresa, colaborador, ano, mes):
    df_base = carregar_dados_base(empresa)
    dados_colab = df_base[df_base['Nome Completo'] == colaborador]
    
    if dados_colab.empty:
        return None
    
    dados = dados_colab.iloc[0]
    horas_semana = float(dados.get('N¬∫ Horas/Semana', 40))
    salario_bruto = calcular_salario_base(horas_semana, st.session_state.salario_minimo)
    
    snapshot = {
        "Nome Completo": colaborador,
        "Ano": ano,
        "M√™s": mes,
        "N¬∫ Horas/Semana": horas_semana,
        "Subs√≠dio Alimenta√ß√£o Di√°rio": float(dados.get('Subs√≠dio Alimenta√ß√£o Di√°rio', 5.96)),
        "N√∫mero Pingo Doce": str(dados.get('N√∫mero Pingo Doce', '')),
        "Sal√°rio Bruto": salario_bruto,
        "Vencimento Hora": calcular_vencimento_hora(salario_bruto, horas_semana),
        "Estado Civil": str(dados.get('Estado Civil', 'Solteiro')),
        "N¬∫ Titulares": int(dados.get('N¬∫ Titulares', 2)),
        "N¬∫ Dependentes": int(dados.get('N¬∫ Dependentes', 0)),
        "Defici√™ncia": str(dados.get('Defici√™ncia', 'N√£o')),
        "IRS Percentagem Fixa": float(dados.get('IRS Percentagem Fixa', 0)),
        "IRS Modo Calculo": str(dados.get('IRS Modo Calculo', 'Tabela')),
        "Status": "Ativo",
        "Data Rescis√£o": "",
        "Motivo Rescis√£o": "",
        "NIF": str(dados.get('NIF', '')),
        "NISS": str(dados.get('NISS', '')),
        "Data de Admiss√£o": str(dados.get('Data de Admiss√£o', '')),
        "IBAN": str(dados.get('IBAN', '')),
        "Sec√ß√£o": str(dados.get('Sec√ß√£o', '')),
        "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    return snapshot

def carregar_ultimo_snapshot(empresa, colaborador, ano, mes):
    excel_file = download_excel(empresa)
    if not excel_file:
        return None
    
    try:
        wb = load_workbook(excel_file)
        nome_aba = get_nome_aba_snapshot(ano, mes)
        
        if nome_aba in wb.sheetnames:
            df = pd.read_excel(excel_file, sheet_name=nome_aba)
            df_colab = df[df['Nome Completo'] == colaborador]
            
            if not df_colab.empty:
                snapshot = df_colab.iloc[-1].to_dict()
                st.caption(f"üì∏ Snapshot: {snapshot.get('Timestamp', 'N/A')}")
                return snapshot
        
        abas_estado = sorted([s for s in wb.sheetnames if s.startswith('Estado_')], reverse=True)
        
        for aba in abas_estado:
            try:
                df = pd.read_excel(excel_file, sheet_name=aba)
                df_colab = df[df['Nome Completo'] == colaborador]
                
                if not df_colab.empty:
                    snapshot = df_colab.iloc[-1].to_dict()
                    snapshot['Ano'] = ano
                    snapshot['M√™s'] = mes
                    snapshot['Timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    st.caption(f"üì∏ Herdado de {aba}")
                    return snapshot
            except:
                continue
        
        return criar_snapshot_inicial(empresa, colaborador, ano, mes)
        
    except Exception as e:
        st.error(f"‚ùå Erro: {e}")
        return None

def gravar_snapshot(empresa, snapshot):
    try:
        ano = snapshot['Ano']
        mes = snapshot['M√™s']
        nome_aba = get_nome_aba_snapshot(ano, mes)
        
        excel_file = download_excel(empresa)
        if not excel_file:
            return False
        
        wb = load_workbook(excel_file)
        aba_criada = garantir_aba(wb, nome_aba, COLUNAS_SNAPSHOT)
        if aba_criada:
            st.info(f"‚ú® Aba '{nome_aba}' criada")
        
        ws = wb[nome_aba]
        
        nova_linha = []
        for col in COLUNAS_SNAPSHOT:
            valor = snapshot.get(col, '')
            if isinstance(valor, (int, float)):
                nova_linha.append(valor)
            else:
                nova_linha.append(str(valor) if valor else '')
        
        ws.append(nova_linha)
        
        sucesso = upload_excel(empresa, wb)
        
        if sucesso:
            linha = ws.max_row
            st.success(f"‚úÖ Snapshot gravado (linha {linha})")
            return True
        
        return False
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gravar: {e}")
        return False

def atualizar_campo_colaborador(empresa, colaborador, ano, mes, campo, novo_valor):
    snapshot = carregar_ultimo_snapshot(empresa, colaborador, ano, mes)
    
    if not snapshot:
        return False
    
    snapshot[campo] = novo_valor
    snapshot['Ano'] = ano
    snapshot['M√™s'] = mes
    snapshot['Timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if campo == "N¬∫ Horas/Semana":
        horas = float(novo_valor)
        snapshot['Sal√°rio Bruto'] = calcular_salario_base(horas, st.session_state.salario_minimo)
        snapshot['Vencimento Hora'] = calcular_vencimento_hora(snapshot['Sal√°rio Bruto'], horas)
    
    return gravar_snapshot(empresa, snapshot)

def carregar_colaboradores_ativos(empresa, ano, mes):
    df_base = carregar_dados_base(empresa)
    
    if df_base.empty:
        return []
    
    colaboradores_ativos = []
    
    for _, colab in df_base.iterrows():
        nome = colab['Nome Completo']
        snapshot = carregar_ultimo_snapshot(empresa, nome, ano, mes)
        
        if snapshot and snapshot.get('Status') == 'Ativo':
            colaboradores_ativos.append(nome)
    
    return colaboradores_ativos

def processar_calculo_salario(dados_form):
    """Processa c√°lculos salariais com f√≥rmulas CORRETAS"""
    salario_bruto = dados_form['salario_bruto']
    horas_semana = dados_form['horas_semana']
    sub_alimentacao_dia = dados_form['subsidio_alimentacao']
    vencimento_hora = calcular_vencimento_hora(salario_bruto, horas_semana)
    
    dias_faltas = dados_form['dias_faltas']
    dias_baixas = dados_form['dias_baixas']
    dias_uteis_trabalhados = dados_form['dias_uteis_trabalhados']
    
    horas_noturnas = dados_form.get('horas_noturnas', 0)
    horas_domingos = dados_form.get('horas_domingos', 0)
    horas_feriados = dados_form.get('horas_feriados', 0)
    horas_extra = dados_form.get('horas_extra', 0)
    
    # VENCIMENTO AJUSTADO - F√ìRMULA CORRETA!
    vencimento_ajustado = calcular_vencimento_ajustado(salario_bruto, dias_faltas, dias_baixas)
    
    sub_alimentacao = sub_alimentacao_dia * dias_uteis_trabalhados
    trabalho_noturno = horas_noturnas * vencimento_hora * 0.25
    domingos = horas_domingos * vencimento_hora
    feriados = horas_feriados * vencimento_hora * 2
    
    if dados_form['sub_ferias_tipo'] == 'Total':
        sub_ferias = salario_bruto
    else:
        sub_ferias = salario_bruto / 12
    
    if dados_form['sub_natal_tipo'] == 'Total':
        sub_natal = salario_bruto
    else:
        sub_natal = salario_bruto / 12
    
    banco_horas_valor = vencimento_hora * horas_extra
    outros_proveitos = dados_form.get('outros_proveitos', 0)
    
    total_remuneracoes = (vencimento_ajustado + sub_alimentacao + trabalho_noturno + 
                          domingos + feriados + sub_ferias + sub_natal + 
                          banco_horas_valor + outros_proveitos)
    
    # DESCONTOS
    base_ss = total_remuneracoes - sub_alimentacao
    seg_social = base_ss * 0.11
    
    # IRS - Base de incid√™ncia = sal√°rio bruto
    if dados_form.get('irs_modo') == 'Fixa':
        taxa_irs = dados_form.get('irs_percentagem_fixa', 0) / 100
        irs = salario_bruto * taxa_irs
    else:
        # Calcular por tabela
        irs = calcular_irs_por_tabela(
            salario_bruto,
            dados_form.get('estado_civil'),
            dados_form.get('num_dependentes'),
            dados_form.get('tem_deficiencia', False)
        )
    
    desconto_especie = sub_alimentacao if dados_form.get('desconto_especie', False) else 0
    total_descontos = seg_social + irs + desconto_especie
    
    liquido = total_remuneracoes - total_descontos
    
    return {
        'vencimento_hora': vencimento_hora,
        'vencimento_ajustado': vencimento_ajustado,
        'sub_alimentacao': sub_alimentacao,
        'trabalho_noturno': trabalho_noturno,
        'domingos': domingos,
        'feriados': feriados,
        'sub_ferias': sub_ferias,
        'sub_natal': sub_natal,
        'banco_horas_valor': banco_horas_valor,
        'outros_proveitos': outros_proveitos,
        'total_remuneracoes': total_remuneracoes,
        'base_ss': base_ss,
        'seg_social': seg_social,
        'base_irs': salario_bruto,
        'irs': irs,
        'desconto_especie': desconto_especie,
        'total_descontos': total_descontos,
        'liquido': liquido
    }

def registar_rescisao(empresa, colaborador, ano, mes, data_rescisao, motivo, obs, dias_aviso):
    snapshot = carregar_ultimo_snapshot(empresa, colaborador, ano, mes)
    
    if not snapshot:
        return False
    
    snapshot['Status'] = 'Rescindido'
    snapshot['Data Rescis√£o'] = data_rescisao.strftime("%Y-%m-%d")
    snapshot['Motivo Rescis√£o'] = f"{motivo} | Dias aviso: {dias_aviso} | Obs: {obs}"
    snapshot['Timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    return gravar_snapshot(empresa, snapshot)

# ==================== INTERFACE ====================

if not check_password():
    st.stop()

st.title("üí∞ Processamento Salarial v2.3")
st.caption("‚úÖ Vencimento ajustado e IRS corrigidos")
st.caption(f"üïê Reload: {st.session_state.ultimo_reload.strftime('%H:%M:%S')}")
st.markdown("---")

menu = st.sidebar.radio(
    "Menu Principal",
    ["‚öôÔ∏è Configura√ß√µes", "üíº Processar Sal√°rios", "üö™ Rescis√µes", "üìä Tabela IRS"],
    index=0
)

# ==================== CONFIGURA√á√ïES ====================

if menu == "‚öôÔ∏è Configura√ß√µes":
    st.header("‚öôÔ∏è Configura√ß√µes do Sistema")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üí∂ Sistema", "üë• Colaboradores", "‚è∞ Hor√°rios", "üìã Dados IRS"])
    
    # TAB 1: SISTEMA
    with tab1:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üí∂ Sal√°rio M√≠nimo Nacional")
            novo_salario = st.number_input(
                "Valor atual (‚Ç¨)",
                min_value=0.0,
                value=st.session_state.salario_minimo,
                step=10.0,
                format="%.2f"
            )
            if st.button("üíæ Atualizar SMN"):
                st.session_state.salario_minimo = novo_salario
                st.success(f"‚úÖ SMN: {novo_salario}‚Ç¨")
        
        with col2:
            st.subheader("üìÖ Feriados Municipais")
            feriados_temp = []
            for i in range(3):
                valor_default = st.session_state.feriados_municipais[i] if i < len(st.session_state.feriados_municipais) else None
                feriado = st.date_input(f"Feriado {i+1}", value=valor_default, key=f"fer_{i}")
                if feriado:
                    feriados_temp.append(feriado)
            
            if st.button("üíæ Atualizar Feriados"):
                st.session_state.feriados_municipais = feriados_temp
                st.success(f"‚úÖ {len(feriados_temp)} feriados")
    
    # TAB 2: COLABORADORES (mant√©m igual √† v2.2)
    with tab2:
        st.subheader("üë• Editar Dados")
        st.warning("‚ö†Ô∏è Aguarda confirma√ß√£o antes de navegar!")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            emp = st.selectbox("Empresa", list(EMPRESAS.keys()), key="emp_cfg")
        with col2:
            mes_cfg = st.selectbox("M√™s", list(range(1, 13)), 
                                 format_func=lambda x: calendar.month_name[x],
                                 index=datetime.now().month - 1, key="mes_cfg")
        with col3:
            ano_cfg = st.selectbox("Ano", [2024, 2025, 2026], index=1, key="ano_cfg")
        
        colabs = carregar_colaboradores_ativos(emp, ano_cfg, mes_cfg)
        
        if colabs:
            colab_sel = st.selectbox("Colaborador", colabs, key="col_cfg")
            
            with st.spinner("üîÑ Carregando..."):
                snap = carregar_ultimo_snapshot(emp, colab_sel, ano_cfg, mes_cfg)
            
            if snap:
                st.markdown("---")
                col1, col2, col3 = st.columns(3)
                col1.metric("üí∞ Subs√≠dio", f"{snap['Subs√≠dio Alimenta√ß√£o Di√°rio']:.2f}‚Ç¨")
                col2.metric("‚è∞ Horas", f"{snap['N¬∫ Horas/Semana']:.0f}h")
                col3.metric("üî¢ N¬∫ Pingo", snap.get('N√∫mero Pingo Doce', ''))
                
                with st.form("form_edit"):
                    col1, col2 = st.columns(2)
                    with col1:
                        novo_sub = st.number_input("Novo Subs√≠dio (‚Ç¨)", min_value=0.0,
                                                  value=float(snap['Subs√≠dio Alimenta√ß√£o Di√°rio']),
                                                  step=0.10, format="%.2f")
                    with col2:
                        novo_num = st.text_input("Novo N¬∫ Pingo", value=str(snap.get('N√∫mero Pingo Doce', '')))
                    
                    submit = st.form_submit_button("üíæ GUARDAR", use_container_width=True, type="primary")
                    
                    if submit:
                        st.warning("‚è≥ AGUARDA...")
                        with st.spinner("1/2: Subs√≠dio..."):
                            s1 = atualizar_campo_colaborador(emp, colab_sel, ano_cfg, mes_cfg,
                                                            "Subs√≠dio Alimenta√ß√£o Di√°rio", novo_sub)
                            time.sleep(1)
                        with st.spinner("2/2: N√∫mero..."):
                            s2 = atualizar_campo_colaborador(emp, colab_sel, ano_cfg, mes_cfg,
                                                            "N√∫mero Pingo Doce", novo_num)
                            time.sleep(1)
                        
                        if s1 and s2:
                            st.success("‚úÖ GRAVADO!")
                            st.balloons()
                            time.sleep(3)
                            st.session_state.ultimo_reload = datetime.now()
                            st.rerun()
        else:
            st.warning("‚ö†Ô∏è Nenhum colaborador ativo")
    
    # TAB 3: HOR√ÅRIOS
    with tab3:
        st.subheader("‚è∞ Mudan√ßas de Hor√°rio")
        # (c√≥digo igual √† v2.2)
        st.info("üöß Funcionalidade mantida da v2.2")
    
    # TAB 4: DADOS IRS
    with tab4:
        st.subheader("üìã Configura√ß√£o de Dados para IRS")
        st.info("üí° Configure dados de estado civil, dependentes e % IRS fixa por colaborador")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            emp_irs = st.selectbox("Empresa", list(EMPRESAS.keys()), key="emp_irs")
        with col2:
            mes_irs = st.selectbox("M√™s", list(range(1, 13)),
                                  format_func=lambda x: calendar.month_name[x],
                                  index=datetime.now().month - 1, key="mes_irs")
        with col3:
            ano_irs = st.selectbox("Ano", [2024, 2025, 2026], index=1, key="ano_irs")
        
        colabs_irs = carregar_colaboradores_ativos(emp_irs, ano_irs, mes_irs)
        
        if colabs_irs:
            colab_irs = st.selectbox("Colaborador", colabs_irs, key="col_irs")
            
            snap_irs = carregar_ultimo_snapshot(emp_irs, colab_irs, ano_irs, mes_irs)
            
            if snap_irs:
                with st.form("form_irs"):
                    st.markdown(f"### {colab_irs}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        estado_civil = st.selectbox("Estado Civil", ESTADOS_CIVIS,
                                                   index=ESTADOS_CIVIS.index(snap_irs.get('Estado Civil', 'Solteiro'))
                                                   if snap_irs.get('Estado Civil') in ESTADOS_CIVIS else 0)
                        num_titulares = st.number_input("N¬∫ Titulares", min_value=1, max_value=2,
                                                       value=int(snap_irs.get('N¬∫ Titulares', 2)))
                        num_dependentes = st.number_input("N¬∫ Dependentes", min_value=0,
                                                         value=int(snap_irs.get('N¬∫ Dependentes', 0)))
                    
                    with col2:
                        tem_deficiencia = st.selectbox("Defici√™ncia", ["N√£o", "Sim"],
                                                      index=0 if snap_irs.get('Defici√™ncia', 'N√£o') == 'N√£o' else 1)
                        irs_modo = st.selectbox("Modo C√°lculo IRS", ["Tabela", "Fixa"],
                                               index=0 if snap_irs.get('IRS Modo Calculo', 'Tabela') == 'Tabela' else 1)
                        irs_percentagem = st.number_input("IRS % Fixa (se aplic√°vel)", min_value=0.0, max_value=100.0,
                                                         value=float(snap_irs.get('IRS Percentagem Fixa', 0)),
                                                         step=0.1, format="%.1f")
                    
                    submit_irs = st.form_submit_button("üíæ GUARDAR DADOS IRS", use_container_width=True, type="primary")
                    
                    if submit_irs:
                        # Atualizar m√∫ltiplos campos
                        snap_irs['Estado Civil'] = estado_civil
                        snap_irs['N¬∫ Titulares'] = num_titulares
                        snap_irs['N¬∫ Dependentes'] = num_dependentes
                        snap_irs['Defici√™ncia'] = tem_deficiencia
                        snap_irs['IRS Modo Calculo'] = irs_modo
                        snap_irs['IRS Percentagem Fixa'] = irs_percentagem
                        snap_irs['Timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        
                        with st.spinner("üîÑ Gravando..."):
                            if gravar_snapshot(emp_irs, snap_irs):
                                st.success("‚úÖ Dados IRS atualizados!")
                                st.balloons()
                                time.sleep(2)
                                st.rerun()

# ==================== PROCESSAR SAL√ÅRIOS ====================

elif menu == "üíº Processar Sal√°rios":
    st.header("üíº Processamento Mensal")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        emp_proc = st.selectbox("Empresa", list(EMPRESAS.keys()), key="emp_proc")
    with col2:
        mes_proc = st.selectbox("M√™s", list(range(1, 13)),
                               format_func=lambda x: calendar.month_name[x],
                               index=datetime.now().month - 1, key="mes_proc")
    with col3:
        ano_proc = st.selectbox("Ano", [2024, 2025, 2026], index=1, key="ano_proc")
    
    with st.spinner("üîÑ Carregando..."):
        colabs_proc = carregar_colaboradores_ativos(emp_proc, ano_proc, mes_proc)
    
    if not colabs_proc:
        st.warning("‚ö†Ô∏è Nenhum colaborador ativo")
        st.stop()
    
    colab_proc = st.selectbox("Colaborador", colabs_proc, key="col_proc")
    
    with st.spinner("üîÑ Carregando snapshot..."):
        snap_proc = carregar_ultimo_snapshot(emp_proc, colab_proc, ano_proc, mes_proc)
    
    if not snap_proc:
        st.error("‚ùå Erro ao carregar")
        st.stop()
    
    salario_bruto = float(snap_proc['Sal√°rio Bruto'])
    horas_semana = float(snap_proc['N¬∫ Horas/Semana'])
    subsidio_alim = float(snap_proc['Subs√≠dio Alimenta√ß√£o Di√°rio'])
    vencimento_hora = float(snap_proc['Vencimento Hora'])
    
    feriados = FERIADOS_NACIONAIS_2025 + st.session_state.feriados_municipais
    dias_uteis_mes = calcular_dias_uteis(ano_proc, mes_proc, feriados)
    
    st.markdown("---")
    
    # DADOS BASE
    with st.expander("üìã DADOS BASE", expanded=True):
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üí∂ Sal√°rio Bruto", f"{salario_bruto:.2f}‚Ç¨")
        col2.metric("‚è∞ Horas/Semana", f"{horas_semana:.0f}h")
        col3.metric("üíµ Vencimento/Hora", f"{vencimento_hora:.2f}‚Ç¨")
        col4.metric("üçΩÔ∏è Sub. Alimenta√ß√£o", f"{subsidio_alim:.2f}‚Ç¨/dia")
        
        col1, col2, col3 = st.columns(3)
        col1.metric("üìÖ Dias √öteis M√™s", dias_uteis_mes)
        col2.metric("üë§ Estado Civil", snap_proc.get('Estado Civil', 'N/A'))
        col3.metric("üë∂ Dependentes", snap_proc.get('N¬∫ Dependentes', 0))
    
    st.markdown("---")
    
    # OP√á√ïES
    col1, col2, col3 = st.columns(3)
    with col1:
        desconto_especie = st.checkbox("‚òëÔ∏è Desconto em Esp√©cie")
    with col2:
        sub_ferias = st.selectbox("üèñÔ∏è Sub. F√©rias", ["Duod√©cimos", "Total"])
    with col3:
        sub_natal = st.selectbox("üéÑ Sub. Natal", ["Duod√©cimos", "Total"])
    
    st.markdown("---")
    
    # AUS√äNCIAS
    st.subheader("üèñÔ∏è Faltas e Baixas")
    col1, col2 = st.columns(2)
    with col1:
        faltas = st.number_input("Total Dias Faltas", min_value=0, value=0, key="falt")
    with col2:
        baixas = st.number_input("Total Dias Baixas", min_value=0, value=0, key="baix")
    
    # Calcular dias √∫teis trabalhados
    dias_uteis_trab = max(dias_uteis_mes - faltas - baixas, 0)
    
    st.markdown("---")
    
    # HORAS EXTRAS
    st.subheader("‚è∞ Horas Extras")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        h_not = st.number_input("üåô Noturnas", min_value=0.0, value=0.0, step=0.5)
    with col2:
        h_dom = st.number_input("üìÖ Domingos", min_value=0.0, value=0.0, step=0.5)
    with col3:
        h_fer = st.number_input("üéâ Feriados", min_value=0.0, value=0.0, step=0.5)
    with col4:
        h_ext = st.number_input("‚ö° Extra", min_value=0.0, value=0.0, step=0.5)
    
    st.markdown("---")
    
    outros_prov = st.number_input("üí∞ Outros Proveitos c/ Descontos (‚Ç¨)", min_value=0.0, value=0.0)
    
    st.markdown("---")
    
    # CALCULAR
    dados_calc = {
        'salario_bruto': salario_bruto,
        'horas_semana': horas_semana,
        'subsidio_alimentacao': subsidio_alim,
        'dias_faltas': faltas,
        'dias_baixas': baixas,
        'dias_uteis_trabalhados': dias_uteis_trab,
        'horas_noturnas': h_not,
        'horas_domingos': h_dom,
        'horas_feriados': h_fer,
        'horas_extra': h_ext,
        'sub_ferias_tipo': sub_ferias,
        'sub_natal_tipo': sub_natal,
        'desconto_especie': desconto_especie,
        'outros_proveitos': outros_prov,
        'estado_civil': snap_proc.get('Estado Civil'),
        'num_dependentes': snap_proc.get('N¬∫ Dependentes', 0),
        'tem_deficiencia': snap_proc.get('Defici√™ncia', 'N√£o') == 'Sim',
        'irs_modo': snap_proc.get('IRS Modo Calculo', 'Tabela'),
        'irs_percentagem_fixa': snap_proc.get('IRS Percentagem Fixa', 0)
    }
    
    resultado = processar_calculo_salario(dados_calc)
    
    # DEBUG
    with st.expander("üîç Debug - Vencimento Ajustado", expanded=False):
        dias_pagos = 30 - faltas - baixas
        st.write(f"**F√≥rmula:** (sal√°rio_bruto / 30) √ó (30 - faltas - baixas)")
        st.write(f"= ({salario_bruto} / 30) √ó (30 - {faltas} - {baixas})")
        st.write(f"= {salario_bruto/30:.2f} √ó {dias_pagos}")
        st.write(f"= **{resultado['vencimento_ajustado']:.2f}‚Ç¨**")
    
    with st.expander("üîç Debug - IRS", expanded=False):
        st.write(f"**Base de incid√™ncia:** {resultado['base_irs']:.2f}‚Ç¨ (Sal√°rio Bruto)")
        st.write(f"**Modo:** {dados_calc['irs_modo']}")
        if dados_calc['irs_modo'] == 'Fixa':
            st.write(f"**Taxa:** {dados_calc['irs_percentagem_fixa']:.1f}%")
        st.write(f"**IRS a pagar:** {resultado['irs']:.2f}‚Ç¨")
    
    # PREVIEW
    st.subheader("üíµ Preview")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üí∞ Remunera√ß√µes")
        st.metric("Vencimento Ajustado", f"{resultado['vencimento_ajustado']:.2f}‚Ç¨")
        st.metric("Sub. Alimenta√ß√£o", f"{resultado['sub_alimentacao']:.2f}‚Ç¨")
        st.metric("Trabalho Noturno", f"{resultado['trabalho_noturno']:.2f}‚Ç¨")
        st.metric("Domingos", f"{resultado['domingos']:.2f}‚Ç¨")
        st.metric("Feriados", f"{resultado['feriados']:.2f}‚Ç¨")
        st.metric("Sub. F√©rias", f"{resultado['sub_ferias']:.2f}‚Ç¨")
        st.metric("Sub. Natal", f"{resultado['sub_natal']:.2f}‚Ç¨")
        st.metric("Horas Extra", f"{resultado['banco_horas_valor']:.2f}‚Ç¨")
        if outros_prov > 0:
            st.metric("Outros", f"{resultado['outros_proveitos']:.2f}‚Ç¨")
        st.markdown("---")
        st.metric("**TOTAL**", f"**{resultado['total_remuneracoes']:.2f}‚Ç¨**")
    
    with col2:
        st.markdown("### üìâ Descontos")
        st.metric("Base SS", f"{resultado['base_ss']:.2f}‚Ç¨")
        st.metric("Seg. Social (11%)", f"{resultado['seg_social']:.2f}‚Ç¨")
        st.metric("Base IRS", f"{resultado['base_irs']:.2f}‚Ç¨")
        st.metric("IRS", f"{resultado['irs']:.2f}‚Ç¨")
        if desconto_especie:
            st.metric("Desconto Esp√©cie", f"{resultado['desconto_especie']:.2f}‚Ç¨")
        st.markdown("---")
        st.metric("**TOTAL**", f"**{resultado['total_descontos']:.2f}‚Ç¨**")
    
    with col3:
        st.markdown("### üíµ Resumo")
        st.metric("Dias √öteis Trab.", dias_uteis_trab)
        st.metric("Dias Pagos", 30 - faltas - baixas)
        st.markdown("---")
        st.metric("**üí∞ L√çQUIDO**", f"**{resultado['liquido']:.2f}‚Ç¨**")

# ==================== RESCIS√ïES ====================

elif menu == "üö™ Rescis√µes":
    st.header("üö™ Rescis√µes")
    st.info("üöß M√≥dulo mantido da v2.2")

# ==================== TABELA IRS ====================

elif menu == "üìä Tabela IRS":
    st.header("üìä Gest√£o de Tabela IRS")
    
    st.markdown("""
    ### üìã Instru√ß√µes:
    1. Fa√ßa upload do ficheiro Excel com as tabelas IRS 2025
    2. O sistema ir√° carregar e usar automaticamente para c√°lculos
    3. As tabelas ficam guardadas durante a sess√£o
    """)
    
    uploaded = st.file_uploader("üì§ Carregar Tabelas IRS (Excel)", type=['xlsx', 'xls'])
    
    if uploaded:
        xls = carregar_tabela_irs_excel(uploaded)
        
        if xls:
            st.markdown("---")
            st.subheader("üëÅÔ∏è Preview das Tabelas")
            
            aba_sel = st.selectbox("Selecione a aba", xls.sheet_names)
            
            df_preview = pd.read_excel(uploaded, sheet_name=aba_sel)
            st.dataframe(df_preview, use_container_width=True)
    
    if st.session_state.tabela_irs:
        st.success("‚úÖ Tabela IRS carregada e ativa!")
    else:
        st.warning("‚ö†Ô∏è Nenhuma tabela carregada. IRS ser√° calculado com 10% por defeito.")

# SIDEBAR
st.sidebar.markdown("---")
st.sidebar.info(f"v2.3 ‚úÖ Correto\nüí∂ SMN: {st.session_state.salario_minimo}‚Ç¨")

if st.sidebar.button("üö™ Logout", use_container_width=True):
    st.session_state.authenticated = False
    st.rerun()
